//import groovy.sql.Sql


plugins {
    id 'com.example.java-conventions'
    id "org.openapi.generator" version "5.3.0"
}


dependencies {
    implementation project(':liquibase')
    implementation project(':kafka')
    implementation 'com.amazonaws:aws-java-sdk:1.12.122'
    testImplementation 'software.amazon.awssdk:s3:2.17.93'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation 'io.swagger:swagger-annotations:1.6.4'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.1'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    runtimeOnly 'org.postgresql:postgresql:42.3.1'
    implementation 'org.openapitools:openapi-generator-core:5.3.1'
    testImplementation 'com.h2database:h2:2.0.204'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.1'
}

group = 'com.example.sbks'
description = 'sbks'

class GradleTasks extends DefaultTask {

    @TaskAction
    void printLine() {
        for (File myFile : new File("files").listFiles())
            if (myFile.isFile()) myFile.delete()
        println("Folder files is clean")
    }
}

task printJ(type: GradleTasks) {

}
tasks.register("deleteDirectory") {
    it.doFirst {
        delete "$rootDir/files"
        println("Folder files is clean")
    }
}

tasks.register("newDirectory") {
    it.doFirst {
        mkdir "$rootDir/files"
       println("Directory add")
    }
    it.dependsOn("deleteDirectory")
}

tasks.register("newFile"){
    it.doFirst {
        file("$rootDir/files/45.txt").createNewFile()
        println("Create new file")
    }
    it.dependsOn("newDirectory")
}
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/api-docs.yaml"
    outputDir = "$buildDir/generated"
    apiPackage = "org.openapi.example.api"
    invokerPackage = "org.openapi.example.invoker"
    modelPackage = "org.openapi.example.model"
    configOptions = [
            dateLibrary: "java11",
            interfaceOnly: 'true',
            skipDefaultInterface: 'true',
            useApiIgnore:'fales',
            swaggerAnnotations: 'true',
    ]
    globalProperties =[
            apis: '',
            models: '',
    ]
}

compileJava {
    dependsOn  tasks.openApiGenerate
}

/*def db = [url:'jdbc:postgresql://localhost:5432/kafkasend',
          user:'postgres', password:'root', driver:'org.postgresql.Driver']
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver)
sql.execute('''delete from download_history where date_create < current_date - 1;''')*/

sourceSets {
    main {
        java {
            srcDir 'build/generated/src/main/java/org/openapi/example'
        }
    }
}

test {
    useJUnitPlatform()
}